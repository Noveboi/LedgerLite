// <auto-generated />
using System;
using LedgerLite.Accounting.Core.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LedgerLite.Accounting.Core.Infrastructure.Migrations
{
    [DbContext(typeof(AccountingDbContext))]
    partial class AccountingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Accounting")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsPlaceholder")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Accounts", "Accounting");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.Accounts.AccountType", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Value");

                    b.ToTable("AccountType", "Accounting");

                    b.HasData(
                        new
                        {
                            Value = 1,
                            Name = "Asset"
                        },
                        new
                        {
                            Value = 5,
                            Name = "Equity"
                        },
                        new
                        {
                            Value = 3,
                            Name = "Expense"
                        },
                        new
                        {
                            Value = 2,
                            Name = "Liability"
                        },
                        new
                        {
                            Value = 4,
                            Name = "Revenue"
                        });
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.Chart.AccountNode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("ChartId");

                    b.HasIndex("ParentId");

                    b.ToTable("AccountNode", "Accounting");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.Chart.ChartOfAccounts", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId")
                        .IsUnique();

                    b.ToTable("Charts", "Accounting");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.Currency", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Value");

                    b.ToTable("Currency", "Accounting");

                    b.HasData(
                        new
                        {
                            Value = 1,
                            Name = "EUR"
                        },
                        new
                        {
                            Value = 3,
                            Name = "GBP"
                        },
                        new
                        {
                            Value = 2,
                            Name = "USD"
                        });
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.JournalEntries.JournalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("FiscalPeriodId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("OccursAt")
                        .HasColumnType("date");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FiscalPeriodId");

                    b.ToTable("JournalEntries", "Accounting");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.JournalEntries.JournalEntryLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EntryId");

                    b.ToTable("JournalEntryLines", "Accounting");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.JournalEntries.JournalEntryStatus", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Value");

                    b.ToTable("JournalEntryStatus", "Accounting");

                    b.HasData(
                        new
                        {
                            Value = 1,
                            Name = "Editable"
                        },
                        new
                        {
                            Value = 2,
                            Name = "Posted"
                        },
                        new
                        {
                            Value = 3,
                            Name = "Reversed"
                        });
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.JournalEntries.JournalEntryType", b =>
                {
                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Value"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Value");

                    b.ToTable("JournalEntryType", "Accounting");

                    b.HasData(
                        new
                        {
                            Value = 3,
                            Name = "Adjusting"
                        },
                        new
                        {
                            Value = 7,
                            Name = "Closing"
                        },
                        new
                        {
                            Value = 5,
                            Name = "Compound"
                        },
                        new
                        {
                            Value = 6,
                            Name = "Opening"
                        },
                        new
                        {
                            Value = 2,
                            Name = "Recurring"
                        },
                        new
                        {
                            Value = 4,
                            Name = "Reversing"
                        },
                        new
                        {
                            Value = 1,
                            Name = "Standard"
                        });
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.Periods.FiscalPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("FiscalPeriods", "Accounting");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.Chart.AccountNode", b =>
                {
                    b.HasOne("LedgerLite.Accounting.Core.Domain.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("LedgerLite.Accounting.Core.Domain.Chart.AccountNode", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LedgerLite.Accounting.Core.Domain.Chart.ChartOfAccounts", null)
                        .WithMany("Nodes")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LedgerLite.Accounting.Core.Domain.Chart.AccountNode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Account");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.JournalEntries.JournalEntry", b =>
                {
                    b.HasOne("LedgerLite.Accounting.Core.Domain.Periods.FiscalPeriod", null)
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.JournalEntries.JournalEntryLine", b =>
                {
                    b.HasOne("LedgerLite.Accounting.Core.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LedgerLite.Accounting.Core.Domain.JournalEntries.JournalEntry", "Entry")
                        .WithMany("Lines")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.Chart.AccountNode", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.Chart.ChartOfAccounts", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("LedgerLite.Accounting.Core.Domain.JournalEntries.JournalEntry", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
